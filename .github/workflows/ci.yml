name: CI

on:
  push:
    tags:
      - 'v*'

env:
  APP_NAME: gocli  # Define the global environment variable

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.22]  # Adjust this version to match your Go version
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./...

      - name: Build for ${{ matrix.os }}
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          if [[ ${{ matrix.os }} == 'ubuntu-latest' ]]; then
            GOOS=linux GOARCH=amd64 go build -ldflags "-X 'main.version=${{ env.VERSION }}'" -o ${{ env.APP_NAME }}-linux
          else
            GOOS=windows GOARCH=amd64 go build -ldflags "-X 'main.version=${{ env.VERSION }}'" -o ${{ env.APP_NAME }}-windows.exe
          fi
        shell: bash

      - name: Upload Linux binary
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-linux
          path: ${{ env.APP_NAME }}-linux

      - name: Upload Windows binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-windows.exe
          path: ${{ env.APP_NAME }}-windows.exe

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Linux binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-linux
          path: .

      - name: Download Windows binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.APP_NAME }}-windows.exe
          path: .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Release for ${{ github.ref_name }}
            - Linux binary
            - Windows binary
          draft: false
          prerelease: false

      - name: Upload Linux binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-linux
          asset_name: ${{ env.APP_NAME }}-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.APP_NAME }}-windows.exe
          asset_name: ${{ env.APP_NAME }}-windows.exe
          asset_content_type: application/octet-stream
